#One of the tasks that programmers had to do when writing code is test it to make sure that it behaves the way that they expected to. Having good tests for our software can help us catch mistakes, errors, and bugs before we deploy our scripts to perform real-world automation tasks. The most basic way of testing a script is to run it with different parameters and see if it returns the expected values. We've done this manual testing for some of the code that we've written this course already. Executing a script with different command-line arguments to see how its behavior changed is an example of manual testing. Using the interpreter to try our code before putting it in a script is another form of manual testing. Formal software testing takes us process a step further, codifying tests into its own software and code that can be run to verify that our programs do what we expect them to do. This is called automatic testing. The goal of automatic testing is to automate the process of checking if the returned value matches the expectations. Instead of us humans running a function over and over with different parameters and checking the results are what we expected them to be, we let the computer do this for us. Automatic testing means we'll write code to do the test. Why would you write more code to test code you have? Because when you're testing your code, you want to check if it does what it's supposed to do for a lot of different values. You ought to verify that it behaves the way you expect it to have as many possible values known as test cases. Say you're writing a script that updates a list of email addresses to use a new domain, similar to the one we wrote a while back. You'll want to test what happens when your list of emails has one element, two elements, or 10 elements. You want to test what happens if the new domain is one character long, or 20 characters long, or even an empty string. You'll also want to test what happens if the list contains only emails that need to be updated, only emails that don't need to be updated, or a mix of them. As you can see the list of things that you want to test for can get very long, very fast. The more test cases that you include in your test, the better tested your code is and the more you can guarantee that your code does what you expect it to do. If we're testing this manually, it's unlikely that we'll go through all the cases whenever we change our code. We'll test just a few, possibly, letting a bug slipped through. Not ideal. This is why we don't want to perform these tests manually and instead, want to make a computer do it for us. Just like with any example of automation, the advantage of automatic tests is that we can run them as many times as necessary and will always get the same results. The computer will do the same checks over and over and we'll always make sure that the return value matches our expectation. When for some reason the results don't match the expectations, the code will raise an error, so we can check the code and find out what's going on. There's a bunch of different types of tests that we can write to perform automatic testing. The one that we're going to concentrate on in the next few videos is called unit testing. Once we've covered unit testing, we'll talk about other kinds of testing and once you use each. But before that let's check that we're on track. Does it always talk about testing making want to take a quick quiz?