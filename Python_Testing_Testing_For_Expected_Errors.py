#In earlier videos, we looked into how we can create unit tests for our functions, for both the basic cases and the edge cases. We called out that we should try to cover lots of different possible cases. To make sure that our function behaves correctly in all of them. With some edge cases, like negative value of minlen in our earlier example, the expectation is that the function will raise an error and we want to be able to test that too. So, how do we do that? Well, we use the assert raises method provided by the unit test module. Let's check this out by adding a couple of test cases to the test suite for our validate user function. 

#We can see that the assert raises method works a little bit differently than the assert equal method that we used before. In this case, we need to first pass the error that we expect the function to raise. Then the function name, followed by any parameters that need to be passed to that function. Behind the scenes, this method is calling the function that we want to test using the try except block and checking that it does raise the error that we said it would raise. Okay, let's run this test suite and verify that our code works correctly.

#All clear. With that, you now know how to test your code to verify that it does what it should and how to test that it raises the right error when that's what you expect. Coming up, a cheat sheet covering all the error handling syntax that we just saw in these videos. Followed by another opportunity for you to test your skills.